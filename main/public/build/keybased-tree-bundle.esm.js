var n={unit_replacement:"\\textcolor{blue}{",htmloutput:"true"};function e(n,t,o,r,c){if(o(c,t),t.children){var i=t.children.length;c++;for(var d=0;d<i;d++){e(n,n[t.children[d]],o,r,c)}c--}r(c,t)}function t(n,t){e(n,n.root,t,(function(){}),0)}const o={addNode:function(n,e){return n?function(n,e,t){const o=n[e];if(o){const r=d(n,3),c={key:r,parentKey:e,children:[],content:t};return n[r]=c,o.children=[...o.children||[],c.key],c}return"unknown parent key: "+e}(this,n,e):"parentKey undefined or null"},insertOver:function(n,e){return function(n,e,t){const o=n[e];if(!o)return'node with key "'+e+'" does not exist';const r=n[o.parentKey];if(r){const e=d(n,3),c={key:e,parentKey:r.key,children:[o.key],content:t},i=r.children.indexOf(o.key);return r.children[i]=e,o.parentKey=e,n[e]=c,c}return"unknown parent key: "+o.parentKey}(this,n,e)},remove:function(n){return function(n,e){const t=n[e];if(!t)return'node with key "'+e+'" does not exist';{let o,r,c;switch(console.log(t.key,"has children",t.children),t.children.length){case 0:return o=n[t.parentKey],o?(r=o.children.indexOf(e),o.children.splice(r,1),c=JSON.parse(JSON.stringify(t)),delete n[e],c):"root cannot be removed";case 1:if(o=n[t.parentKey],o){r=o.children.indexOf(e);const i=t.children[0],d=n[i];return o.children[r]=i,d.parentKey=t.parentKey,c=JSON.parse(JSON.stringify(t)),delete n[e],c}return"root cannot be removed";default:return"node with more than one child cannot be removed"}}}(this,n)},fromRootToLeafs:function(n){t(this,n)},fromRootToLeafs_EnterLeave:function(n,t){!function(n,t,o){e(n,n.root,t,o,0)}(this,n,t)},fromLeafsToRoot:function(n){!function(n,t){e(n,n.root,(function(){}),t,0)}(this,n)},withAllLeafs:function(n){t(this,(function(e,t){0===t.children.length&&n(e,t)}))}};function r(n){const e=Object.create(o),t={key:"root",parentKey:null,children:[],content:n};return e.root=t,e}function c(n){return{...n,...o}}function i(n){let e="";const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",o=t.length;for(let r=0;r<n;r++)e+=t.charAt(Math.floor(Math.random()*o));return e}function d(n,e){const t=Object.keys(n);let o=null;for(let n=0;n<10;n++){const r=i(e);-1===t.indexOf(r)?(o=r,n=10):console.warn("try number",n,"not successful:",r,"exists")}if(null===o)throw"no new key found";return o}function u(){const n=r("Demo Tree"),e=n.addNode("root","content-W"),t=n.addNode("root","content-Y");n.addNode(e.key,"content-R");const o=n.addNode(e.key,"content-S");n.addNode(e.key,"content-E");const c=n.addNode(o.key,"content-T");n.addNode(t.key,"content-A");const i=n.addNode(t.key,"content-C"),d=n.insertOver(i.key,"content-K");console.log("inserted:",d);const u=n.insertOver(c.key,"content-B");return console.log("inserted:",u),n}var l="0.1.79";function s(){return!0}window.onload=function(){console.log("version (from package.json) ","0.1.79")};export{n as config,r as createTree,c as createTreeFromJson,u as demoTree,s as mainIsLoaded,l as version};
